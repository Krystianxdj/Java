import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import jssc.SerialPortList;

public class ControlApp extends JFrame implements ActionListener
{
    private JLabel lPort,lDostepnePorty;
    private JTextField tPort;

    private JLabel autor;
    private JLabel wersja;
    private JLabel email;

    private JButton bBtn1, bBtn2, bBtn3, bBtn4, bBtn5, bComTest,bComFind;

    static SerialPort serialPort;

    String wybierzPort;


    public ControlApp()
    {
        setSize(500,300);
        setTitle("ZL27ARM Control App 1.1");
        setLayout(null);

        lPort = new JLabel("RS232 Port");
        lPort.setBounds(20,20,100,20);
        add(lPort);

        tPort = new JTextField("");
        tPort.setBounds(20,40,80,20);
        tPort.addActionListener(this);
        add(tPort);

        autor = new JLabel("Krystian Wolski");
        autor.setBounds(350,200,200,25);
        add(autor);

        email = new JLabel("krystian.wolski@yahoo.co.uk");
        email.setBounds(300,215,200,25);
        add(email);

        bComTest = new JButton("Open");
        bComTest.setBounds(110,20,70,40);
        bComTest.addActionListener(this);
        add(bComTest);

        bComFind = new JButton("Find");
        bComFind.setBounds(190,20,70,40);
        bComFind.addActionListener(this);
        add(bComFind);

        bBtn1 = new JButton("DO1");
        bBtn1.setBounds(20,100,60,60);
        bBtn1.addActionListener(this);
        add(bBtn1);

        bBtn2 = new JButton("DO2");
        bBtn2.setBounds(90,100,60,60);
        bBtn2.addActionListener(this);
        add(bBtn2);

        bBtn3 = new JButton("DO3");
        bBtn3.setBounds(160,100,60,60);
        bBtn3.addActionListener(this);
        add(bBtn3);

        bBtn4 = new JButton("DO4");
        bBtn4.setBounds(230,100,60,60);
        bBtn4.addActionListener(this);
        add(bBtn4);

    }




    public static void main(String[] args)
    {
        System.out.println("test");

        ControlApp aplikacja = new ControlApp();
        aplikacja.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        aplikacja.setVisible(true);






    }


    static class SerialPortReader implements SerialPortEventListener {
        public void serialEvent(SerialPortEvent event) {
            //System.out.println("");


            try {
                //byte buffer[] = serialPort.readBytes(5);
                String k = serialPort.readString();
                System.out.println(k);

            } catch (SerialPortException e) {
                e.printStackTrace();
            }


        }

    }

    @Override
    public void actionPerformed(ActionEvent e)
    {
        Object zrodlo = e.getSource();
        if(zrodlo == bComFind)
        {
            //bComTest.setBackground(Color.green);
            //tPort.setBackground(Color.green);

            /////////////////////////////////Check RS port//////////////////////////////////////////////////
            //Method getPortNames() returns an array of strings. Elements of the array is already sorted.
            String[] portNames = SerialPortList.getPortNames();
            for(int i = 0; i < portNames.length; i++){
                System.out.println(portNames[i]);
            }
        }
        else if(zrodlo == bComTest || zrodlo == tPort)
        {
            /////////////////////////////////Check RS port//////////////////////////////////////////////////
            try {
                wybierzPort = tPort.getText();
                tPort.setText(wybierzPort.toUpperCase());
                serialPort = new SerialPort(wybierzPort);
                serialPort.openPort();//Open port
                serialPort.setParams(9600, 8, 1, 0);//Set params
                int mask = SerialPort.MASK_RXCHAR + SerialPort.MASK_CTS + SerialPort.MASK_DSR;//Prepare mask
                serialPort.setEventsMask(mask);//Set mask
                serialPort.addEventListener(new SerialPortReader());//Add SerialPortEventListener
                serialPort.writeString("Connection Established\n\r");
                tPort.setBackground(Color.green);
                tPort.setFont(new Font("SansSerif",Font.BOLD,15));
                serialPort.closePort();
            }
            catch (SerialPortException ex) {
                System.out.println(ex);
                tPort.setBackground(Color.white);
                tPort.setFont(new Font("SansSerif",Font.PLAIN,12));

            }
        }
        else if(zrodlo == bBtn1)
        {
            System.out.println("a");



            try {
                wybierzPort = tPort.getText();
                tPort.setText(wybierzPort.toUpperCase());
                serialPort = new SerialPort(wybierzPort);
                serialPort.openPort();//Open port
                serialPort.setParams(9600, 8, 1, 0);//Set params
                int mask = SerialPort.MASK_RXCHAR + SerialPort.MASK_CTS + SerialPort.MASK_DSR;//Prepare mask
                serialPort.setEventsMask(mask);//Set mask
                serialPort.addEventListener(new SerialPortReader());//Add SerialPortEventListener
                serialPort.writeString("1a1\n\r");
                tPort.setBackground(Color.green);
                tPort.setFont(new Font("SansSerif",Font.BOLD,15));
                serialPort.closePort();
            }
            catch (SerialPortException ex) {
                System.out.println(ex);
                tPort.setBackground(Color.white);
                tPort.setFont(new Font("SansSerif",Font.PLAIN,12));

            }






        }
        else if(zrodlo == bBtn2)
        {
            System.out.println("b");

        }
        else if(zrodlo == bBtn3)
        {
            System.out.println("c");

        }
        else if(zrodlo == bBtn4)
        {
            System.out.println("d");

        }

    }
}
