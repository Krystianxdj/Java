import java.awt.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

import javax.swing.SwingWorker;

import org.knowm.xchart.QuickChart;
import org.knowm.xchart.SwingWrapper;
import org.knowm.xchart.XYChart;

import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import jssc.SerialPortList;

/**
 * Creates a real-time chart using SwingWorker
 */
public class SwingWorkerRealTime {

    String k;
    int wartosc = 0;

    MySwingWorker mySwingWorker;
    SwingWrapper<XYChart> sw;
    XYChart chart;

    static SerialPort serialPort;

    public static void main(String[] args) throws Exception {

        SwingWorkerRealTime swingWorkerRealTime = new SwingWorkerRealTime();
        swingWorkerRealTime.go();
    }

    class SerialPortReader implements SerialPortEventListener {
        public void serialEvent(SerialPortEvent event) {
            //System.out.println("");


            try {
                //byte buffer[] = serialPort.readBytes(5);
                //String k = serialPort.readString();

                byte[] buf = serialPort.readBytes(4);
                if (buf == null || buf.length <= 0) {
                    return;
                }

                String k = new String(buf, 0, buf.length);

                System.out.println(k);

                wartosc = Integer.parseInt(k);
                System.out.println("odebrano: " + k);  // Output user input

                buf = null;

            } catch (SerialPortException e) {
                e.printStackTrace();
            }


        }

    }

    private void go() {

        // Create Chart
        chart = QuickChart.getChart("Real-time ADC tracker", "Samples", "Value", "ADC", new double[] { 0 }, new double[] { 0 });
        chart.getStyler().setLegendVisible(true);
        chart.getStyler().setXAxisTicksVisible(true);

        chart.getStyler().setToolTipsEnabled(true);             //displays value when the user moves or hovers the pointer over a line
        //chart.getStyler().setToolTipsAlwaysVisible(true);
        chart.getStyler().setToolTipBorderColor(Color.blue);

        // Show it
        sw = new SwingWrapper<XYChart>(chart);
        sw.displayChart();

        mySwingWorker = new MySwingWorker();
        mySwingWorker.execute();
    }

    private class MySwingWorker extends SwingWorker<Boolean, double[]> {

        LinkedList<Double> fifo = new LinkedList<Double>();

        public MySwingWorker() {

            fifo.add(0.0);
        }


        int x = 0;
        int y = 0;
        int z = 0;

        @Override
        protected Boolean doInBackground() throws Exception {


            serialPort = new SerialPort("Com5");
            serialPort.openPort();//Open port
            serialPort.setParams(9600, 8, 1, 0);//Set params
            int mask = SerialPort.MASK_RXCHAR + SerialPort.MASK_CTS + SerialPort.MASK_DSR;//Prepare mask
            serialPort.setEventsMask(mask);//Set mask
            serialPort.addEventListener(new SerialPortReader());//Add SerialPortEventListener



            while (!isCancelled()) {


                //Scanner myObj = new Scanner(System.in);  // Create a Scanner object
                //System.out.println("Enter value");

                //int myValue = myObj.nextInt();  // Read user input
                //System.out.println("Value is: " + myValue);  // Output user input

                x = wartosc;
                z = x-y;
                y = wartosc;


                fifo.add(fifo.get(fifo.size() - 1) + z);
                //if (fifo.size() > 50) {
                //    fifo.removeFirst();
                //}

                double[] array = new double[fifo.size()];
                for (int i = 0; i < fifo.size(); i++) {
                    array[i] = fifo.get(i);
                }
                publish(array);

                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    // eat it. caught when interrupt is called
                    System.out.println("MySwingWorker shut down.");
                }

            }

            return true;
        }

        @Override
        protected void process(List<double[]> chunks) {

            // System.out.println("number of chunks: " + chunks.size());

            double[] mostRecentDataSet = chunks.get(chunks.size() - 1);

            chart.updateXYSeries("ADC", null, mostRecentDataSet, null);
            sw.repaintChart();

            long start = System.currentTimeMillis();
            long duration = System.currentTimeMillis() - start;
            try {
                Thread.sleep(40 - duration); // 40 ms ==> 25fps
                // Thread.sleep(400 - duration); // 40 ms ==> 2.5fps
            } catch (InterruptedException e) {
            }

        }
    }
}
